	sentence	gold_amr	generated_amr
0	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Maritime officials in Kenya stated that critical details have yet to be agreed upon.
AMR graph:"	"(s / state-01
      :ARG0 (o / official
            :topic (m / maritime)
            :location (c / country :wiki ""Kenya"" :name (n / name :op1 ""Kenya"")))
      :ARG1 (h / have-11
            :ARG1 (y / yet)
            :ARG2 (a / agree-01
                  :ARG1 (d / detail-01
                        :ARG1-of (c2 / critical-02)))))"	"(s / state-01
      :ARG0 (o / official
            :mod (m / maritime)
            :location (c / country :wiki ""Kenya"" :name (n / name :op1 ""Kenya"")))
      :ARG1 (a / agree-01
            :ARG1 (d / detail :mod (c2 / critical))
            :polarity -))"
1	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: United Nations arms inspectors on December 28, 2002 visited 7 sites in Iraq in order to search for prohibited weapons of mass destruction according to spokesman Hiro Ueki.
AMR graph:"	"(s / say-01
      :ARG0 (p3 / person :wiki -
            :name (n / name :op1 ""Hiro"" :op2 ""Ueki"")
            :ARG0-of (h2 / have-org-role-91
                  :ARG2 (s2 / spokesman)))
      :ARG1 (v / visit-01
            :ARG0 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (o / organization :wiki ""United_Nations""
                              :name (n2 / name :op1 ""United"" :op2 ""Nations""))
                        :ARG3 (i / inspect-01
                              :ARG0 p
                              :ARG1 (a / arm))))
            :ARG1 (s3 / site :quant 7
                  :location (c / country :wiki ""Iraq""
                        :name (n3 / name :op1 ""Iraq"")))
            :time (d / date-entity :month 12 :day 28 :year 2002)
            :purpose (s4 / search-01
                  :ARG0 p
                  :ARG2 (w / weapon
                        :ARG0-of (d2 / destroy-01
                              :degree (m / mass))
                        :ARG1-of (p2 / prohibit-01)))))"	"
(v / visit-01
    :ARG0 (p / person :ARG0-of (i / inspect-01 :ARG1 (a / arm))
                    :location (o / organization :wiki ""United_Nations"" :name (n / name :op1 ""United"" :op2 ""Nations"")))
    :ARG1 (s / site :quant 7)
    :location (c / country :wiki ""Iraq"" :name (n2 / name :op1 ""Iraq""))
    :time (d / date-entity :year 2002 :month 12 :day 28)
    :purpose (s2 / search-01
        :ARG1 (w / weapon
            :mod (d / destroy-01 :mod (m / mass))
            :ARG1-of (p2 / prohibit-01)))
    :medium (s3 / say-01
        :ARG0 (p3 / spokesman :wiki ""Hiro_Ueki"" :name (n3 / name :op1 ""Hiro"" :op2 ""Ueki""))))
"
2	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: SUPPLIES WE NEED: comfortable nursing chairs and rockers, nursing foot stool, boppie, SLINGS and baby clothes, diapers.
AMR graph:"	"(n / need-01
      :ARG0 (w / we)
      :ARG1 (s / supply-01
            :example (c / chair
                  :mod (n2 / nursing)
                  :ARG0-of (c2 / comfortable-02))
            :example (r / rocker)
            :example (s2 / stool
                  :mod (f / foot)
                  :mod n2)
            :example (b / boppie)
            :example (s3 / sling)
            :example (c3 / cloth
                  :mod (b2 / baby))
            :example (d / diaper)))"	"
(l / list
    :ARG1 (a / and
        :op1 (c / chair :mod (n / nursing) :mod (c2 / comfortable))
        :op2 (r / rocker :mod (n2 / nursing) :mod (c2))
        :op3 (s / stool :mod (f / foot) :mod (n2))
        :op4 (b / boppie)
        :op5 (s2 / sling)
        :op6 (c3 / clothes :mod (b2 / baby))
        :op7 (d / diaper)))
"
3	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: My fellow citizens, of the heinous crimes committed by Japan in China, there are too many instances to cite, difficult to record without exhausting all bamboo strips.
AMR graph:"	"(s / say-01
      :ARG0 (i2 / i)
      :ARG1 (h2 / have-quant-91
            :ARG1 (i / instance
                  :ARG1-of (r / record-01
                        :manner (d / difficult)
                        :manner (e / exhaust-01 :polarity -
                              :ARG1 (s2 / strip
                                    :consist-of (b / bamboo)
                                    :mod (a / all)))))
            :ARG2 (m2 / many)
            :ARG3 (t / too)
            :ARG6 (p / possible-01 :polarity -
                  :ARG1 (c6 / cite-01
                        :ARG1 i))
            :topic (c2 / crime-02
                  :ARG1 (h / heinous)
                  :ARG1-of (c3 / commit-02
                        :ARG0 (c4 / country :wiki ""Japan"" :name (n / name :op1 ""Japan""))
                        :location (c5 / country :wiki ""China"" :name (n2 / name :op1 ""China"")))))
      :ARG2 (c / citizen
            :mod (f / fellow)
            :poss i2))"	"
(e / exhaust-01
  :ARG1 (b / bamboo-strip
    :quant (a / all))
  :condition (c / cite-01
    :ARG1 (i / instance
      :quant (m / many
        :degree (t / too)))
    :ARG1-of (c2 / commit-01
      :ARG0 (c3 / country
        :wiki ""Japan""
        :name (n / name :op1 ""Japan""))
      :ARG2 (c4 / crime
        :mod (h / heinous)
        :location (c5 / country
          :wiki ""China""
          :name (n2 / name :op1 ""China"")))))
  :accompanier (c6 / citizen
    :mod (f / fellow)
    :poss (i2 / i)))
"
4	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Shortly after the freighter was hijacked on 25 September 2008 the Kenyan government claimed that the weapons on board were being shipped for Kenya's military.
AMR graph:"	"(c / claim-01
      :ARG0 (g / government-organization
            :ARG0-of (g2 / govern-01
                  :ARG1 (c2 / country :wiki ""Kenya"" :name (n / name :op1 ""Kenya""))))
      :ARG1 (s / ship-01
            :ARG1 (w / weapon
                  :ARG0-of (b / board-01))
            :ARG2 (m / military
                  :poss c2))
      :time (a / after
            :op1 (h / hijack-01
                  :ARG1 (f / freighter)
                  :time (d / date-entity :year 2008 :month 9 :day 25))
            :ARG1-of (s2 / short-07)))"	"
(c / claim-01
   :ARG0 (g / government :mod (c2 / country :wiki ""Kenya"" :name (n / name :op1 ""Kenya"")))
   :ARG1 (s / ship-01
      :ARG1 (w / weapon)
      :ARG2 (c3 / country :wiki ""Kenya"" :name (n2 / name :op1 ""Kenya""))
      :ARG0-of (m / military-state))
   :time (a / after
      :op1 (h / hijack-01
         :ARG1 (f / freighter)
         :time (d / date-entity :year 2008 :month 9 :day 25)))
   :time (s2 / short-time))
"
5	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: ""Qatar is a very important country on this issue.
AMR graph:"	"(c2 / country
      :ARG1-of (i2 / important-01
            :ARG2 (i3 / issue-02
                  :mod (t2 / this))
            :degree (v / very))
      :domain (c / country :wiki ""Qatar"" :name (n / name :op1 ""Qatar"")))"	"
(i / important-02
    :degree (v / very)
    :ARG1 (c / country
        :name (n / name :op1 ""Qatar""))
    :topic (i2 / issue
        :mod (t / this)))
"
6	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Peruvian military document discloses former intelligence head Montesinos' links with drug trafficking
AMR graph:"	"(d / disclose-01
      :ARG0 (d2 / document
            :mod (m / military
                  :mod (c / country :wiki ""Peru"" :name (n / name :op1 ""Peru""))))
      :ARG1 (l / link-01
            :ARG1 (p / person :wiki ""Vladimiro_Montesinos"" :name (n2 / name :op1 ""Montesinos"")
                  :ARG0-of (h / head-01
                        :ARG1 (i / intelligence)
                        :time (f / former)))
            :ARG2 (t / traffic-01
                  :ARG1 (d3 / drug))))"	"
(d / disclose-01
    :ARG0 (d2 / document
        :mod (m / military
            :mod (c / country
                :wiki ""Peru""
                :name (n / name :op1 ""Peru""))))
    :ARG1 (l / link
        :poss (p / person
            :wiki ""Vladimiro_Montesinos""
            :name (n2 / name :op1 ""Montesinos""))
        :ARG0-of (t / traffic-02
            :mod (d3 / drug))))
"
7	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Premier Peng Li and Kirghizian President Akayev attended the signing ceremony .
AMR graph:"	"(a2 / attend-01
      :ARG0 (a3 / and
            :op1 (p / person :wiki ""Li_Peng""
                  :name (n2 / name :op1 ""Peng"" :op2 ""Li"")
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (p2 / premier)))
            :op2 (p3 / person :wiki ""Askar_Akayev""
                  :name (n3 / name :op1 ""Akayev"")
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 (c / country :wiki ""Kyrgyzstan""
                              :name (n4 / name :op1 ""Kirghizia""))
                        :ARG2 (p4 / president))))
      :ARG1 (c2 / ceremony
            :mod (s / sign-01)))"	"
(a / attend-01
    :ARG0 (a2 / and
        :op1 (p / person
            :wiki -
            :name (n / name :op1 ""Peng"" :op2 ""Li"")
            :ARG0-of (h / have-org-role-91
                :ARG1 (p2 / premier)))
        :op2 (p3 / president
            :wiki -
            :name (n2 / name :op1 ""Akayev"")
            :mod (c / country
                :wiki ""Kyrgyzstan""
                :name (n3 / name :op1 ""Kirghizian""))))
    :ARG1 (c2 / ceremony
        :ARG0-of (s / sign-01)))
"
8	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: No casualties have been reported as the primary school had no classes over the weekend.
AMR graph:"	"(c / cause-01
      :ARG0 (h / have-03 :polarity -
            :ARG0 (s / school
                  :mod (p / primary))
            :ARG1 (c3 / class)
            :time (w / weekend))
      :ARG1 (r / report-01 :polarity -
            :ARG1 (c2 / casualty)))"	"
(r / report-01
    :polarity -
    :ARG1 (c / casualty) 
    :time (h / have-03
        :ARG1 (c2 / class)
        :polarity -
        :ARG2 (s / school
            :mod (p / primary))
        :time (w / weekend)))
"
9	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The People's Mujahedeen accused the French authorities of carrying out the operation as part of a deal with the Iranian government.
AMR graph:"	"(a / accuse-01
      :ARG0 (o / organization :wiki ""People's_Mujahedin_of_Iran"" :name (n / name :op1 ""People's"" :op2 ""Mujahedeen""))
      :ARG1 (a2 / authority
            :mod (c / country :wiki ""France"" :name (n2 / name :op1 ""France"")))
      :ARG2 (h / have-part-91
            :ARG1 (d / deal-01
                  :ARG0 a2
                  :ARG1 (g / government-organization
                        :ARG0-of (g2 / govern-01
                              :ARG1 (c3 / country :wiki ""Iran"" :name (n3 / name :op1 ""Iran"")))))
            :ARG2 (c2 / carry-out-03
                  :ARG0 a2
                  :ARG1 (o2 / operation))))"	"
(a / accuse-01
    :ARG0 (p / organization :wiki ""People's_Mujahedin_of_Iran""
        :name (n / name :op1 ""People's"" :op2 ""Mujahedeen""))
    :ARG1 (a2 / authority :mod (f / French))
    :ARG2 (c / carry-out-02
        :ARG0 a2
        :ARG1 (o / operate-01)
        :purpose (d / deal-01
            :ARG1 (g / government :mod (i / Iranian)))
        :prep-with g))
"
10	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Both take what they need
AMR graph:"	"(t / take-01
      :ARG0 (b / both)
      :ARG1 (t2 / thing
            :ARG1-of (n / need-01
                  :ARG0 b)))"	"(t / take-01
    :ARG0 (b / both)
    :ARG1 (w / what
        :ARG0 (t2 / they))
    :ARG2 (n / need-01
        :ARG0 t2))"
11	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: China and Kyrgyzstan said in the communique that peace, stability and a just and rational world political and economic order should be established on the basis of the UN Charter and norms and principles of international law.
AMR graph:"	"(s / say-01
      :ARG0 (a / and
            :op1 (c / country :wiki ""China"" :name (n / name :op1 ""China""))
            :op2 (c2 / country :wiki ""Kyrgyzstan"" :name (n2 / name :op1 ""Kyrgyzstan"")))
      :ARG1 (r / recommend-01
            :ARG1 (e / establish-01
                  :ARG1 (a2 / and
                        :op1 (p / peace)
                        :op2 (s2 / stability)
                        :op3 (a6 / and
                              :op1 (o / order
                                    :mod (p2 / politics))
                              :op2 (o2 / order
                                    :mod (e2 / economy))
                              :mod (w / world
                                    :ARG0-of (j / just-02)
                                    :mod (r2 / rational))))
                  :ARG1-of (b / base-02
                        :ARG2 (a5 / and
                              :op1 (t / treaty :wiki ""United_Nations_Charter"" :name (n3 / name :op1 ""UN"" :op2 ""Charter""))
                              :op2 (n4 / norm
                                    :poss (l / law
                                          :mod (i / international)))
                              :op3 (p3 / principle
                                    :poss l)))))
      :medium (c3 / communique))"	"
(s / say-01
    :ARG0 (c / country :wiki ""China"" :name (n / name :op1 ""China"")
           :op2 (k / country :wiki ""Kyrgyzstan"" :name (n2 / name :op1 ""Kyrgyzstan"")))
    :ARG1 (e / establish-01
        :ARG1 (a / and
            :op1 (p / peace)
            :op2 (s2 / stability)
            :op3 (o / order
                :mod (j / just)
                :mod (r / rational)
                :mod (w / world)
                :mod (a2 / and
                    :op1 (p2 / political)
                    :op2 (e2 / economic))))
        :condition (b / base
            :part-of (s3 / system
                :mod (c2 / charter)
                :mod (u / United-Nations)
                :mod (n3 / norm)
                :mod (p3 / principle)
                :mod (l / law :mod (i / international))))))
"
12	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Satellite images published by the Institute for Science and International Security show construction at the heavy-water research reactor facility near the city of Arak has progressed significantly between 080200 and 081000.
AMR graph:"	"(s / show-01
      :ARG0 (i / image
            :source (s2 / satellite)
            :ARG1-of (p / publish-01
                  :ARG0 (o / organization :wiki ""Institute_for_Science_and_International_Security"" :name (n / name :op1 ""Institute"" :op2 ""for"" :op3 ""Science"" :op4 ""and"" :op5 ""International"" :op6 ""Security""))))
      :ARG1 (p2 / progress-01
            :ARG1 (c / construct-01
                  :ARG1 (f / facility
                        :mod (r2 / reactor
                              :purpose (r3 / research-01)
                              :mod (w / water
                                    :mod (h / heavy)))
                        :ARG1-of (n2 / near-02
                              :ARG2 (c2 / city :wiki ""Arak,_Iran"" :name (n3 / name :op1 ""Arak"")))))
            :ARG1-of (s3 / significant-02)
            :time (d3 / date-interval
                  :op1 (d / date-entity :month 2 :year 2008)
                  :op2 (d2 / date-entity :month 10 :year 2008))))"	"
(s / show-01
    :ARG0 (p / publish-01
        :ARG1 (i / image
            :mod (s2 / satellite))
        :ARG2 (i2 / institute
            :name (n / name
                :op1 ""Institute""
                :op2 ""for""
                :op3 ""Science""
                :op4 ""and""
                :op5 ""International""
                :op6 ""Security"")))
    :ARG1 (p2 / progress-01
        :ARG1 (c / construction
            :location (f / facility
                :mod (r / research
                    :mod (h / heavy-water))
                :location (c2 / city
                    :name (n2 / name
                        :op1 ""Arak"")
                    :mod (n3 / near)))
            :mod (s3 / significant))
        :time (b / between
            :op1 (d / date-entity
                :year 80200)
            :op2 (d2 / date-entity
                :year 81000)))))
"
13	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The Caucus region is an important conduit for the flow of oil from the Caspian Sea to world markets.
AMR graph:"	"(c / conduit
      :domain (w / world-region :wiki ""Caucasus"" :name (n / name :op1 ""Caucasus""))
      :ARG1-of (i / important-01)
      :purpose (f / flow-01
            :ARG1 (o / oil)
            :source (s / sea :wiki ""Caspian_Sea"" :name (n2 / name :op1 ""Caspian"" :op2 ""Sea""))
            :destination (m / market
                  :mod (w2 / world))))"	"(c / conduit
   :ARG1 (f / flow-01
      :ARG2 (o / oil)
      :source (s / sea
         :wiki ""Caspian_Sea""
         :name (n / name :op1 ""Caspian""))
      :destination (m / market
         :mod (w / world))))
:mod (i / important)
:location (r / region
   :wiki ""Caucasus""
   :name (n2 / name :op1 ""Caucasus"")))"
14	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Chirac's visit has come while the Russian Government has displayed uneasiness about NATO's latest expansion to the Russian borders and the European Union's imminent enlargement within the former Soviet sphere of influence in Eastern Europe.
AMR graph:"	"(v2 / visit-01
      :ARG0 (p / person :wiki ""Jacques_Chirac"" :name (n / name :op1 ""Chirac""))
      :time (d / display-01
            :ARG0 (g / government-organization
                  :ARG0-of (g2 / govern-01
                        :ARG1 (c2 / country :wiki ""Russia"" :name (n2 / name :op1 ""Russia""))))
            :ARG1 (u / uneasy-01
                  :ARG1 g
                  :ARG2 (a / and
                        :op1 (e / expand-01
                              :ARG1 (m / military :wiki ""NATO"" :name (n3 / name :op1 ""NATO""))
                              :ARG4 (b / border-01
                                    :ARG2 c2)
                              :mod (l / last))
                        :op2 (e2 / enlarge-01
                              :ARG1 (o2 / organization :wiki ""European_Union"" :name (n4 / name :op1 ""European"" :op2 ""Union""))
                              :ARG2 (s / sphere
                                    :mod (c / country :wiki ""Soviet_Union"" :name (n5 / name :op1 ""Soviet"" :op2 ""Union""))
                                    :ARG1-of (i / influence-01)
                                    :location (w2 / world-region :wiki ""Eastern_Europe"" :name (n6 / name :op1 ""Eastern"" :op2 ""Europe""))
                                    :time (f / former))
                              :mod (i2 / imminent))))))"	"
(c / come-01
  :ARG0 (v / visit-01
    :ARG0 (p / person
      :name (n / name :op1 ""Chirac"")))
  :time (d / display-01
    :ARG0 (g / government-organization
      :name (n2 / name :op1 ""Russian""))
    :ARG1 (u / uneasy
      :ARG1 (e / expand-01
        :ARG0 (a / alliance
          :name (n3 / name :op1 ""NATO""))
        :ARG4 (b / border
          :location (g2 / government-organization
            :name (n4 / name :op1 ""Russian"")))))
    :time (e2 / enlarge-01
      :ARG0 (u2 / union
        :name (n5 / name :op1 ""European""))
      :ARG4 (i / influence
        :location (a2 / area
          :mod (c2 / country
            :name (n6 / name :op1 ""Soviet""))
          :location (e3 / region
            :name (n7 / name :op1 ""Eastern"" :op2 ""Europe""))))))))
"
15	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The list was made available on condition that neither the diplomat nor the diplomat's country be identified.
AMR graph:"	"(a3 / avail-01
      :ARG2 (l / list)
      :ARG1-of (c / condition-01
            :ARG2 (i / identify-01 :polarity -
                  :ARG1 (a2 / and
                        :op1 (p / person
                              :ARG0-of (h / have-org-role-91
                                    :ARG2 (d / diplomat)))
                        :op2 (c2 / country
                              :source-of p)))))"	"
(a / and
    :op1 (d / diplomat)
    :op2 (c / country :poss d))
(a2 / and
    :op1 (i / identify-01 :ARG1 d :polarity -)
    :op2 (i2 / identify-01 :ARG1 c :polarity -))
(a3 / and
    :op1 (m / make-02 :ARG1 (l / list) :ARG2 (a4 / available))
    :op2 (c2 / condition-01 :ARG1 (a2)))
"
16	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: 08/02/2010 13:52
AMR graph:"	"(d / date-entity :time ""13:52"" :day 8 :year 2010 :month 2)"	"(d / date-entity :day 2 :month 8 :year 2010 :time ""13:52"")"
17	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Sheng Chen , who is 19 years old this year , from Hubei , is temporarily in the sixth position , the a total score of 342.60 points .
AMR graph:"	"(p / position-01
      :ARG1 (p3 / person :wiki - :name (n / name :op1 ""Sheng"" :op2 ""Chen"")
            :source (p4 / province :wiki ""Hubei"" :name (n2 / name :op1 ""Hubei""))
            :ARG1-of (s2 / score-01
                  :ARG2 (p2 / point :quant 342.60)
                  :mod (t3 / total))
            :ARG1-of (a / age-01
                  :ARG2 (t / temporal-quantity :quant 19
                        :unit (y / year))
                  :time (y2 / year
                        :mod (t4 / this))))
      :ord (o / ordinal-entity :value 6)
      :duration (t2 / temporary))"	"
(a / and
    :op1 (p / person
            :name (n / name :op1 ""Sheng"" :op2 ""Chen"")
            :age (y / year :quant 19)
            :mod (s / state :wiki ""Hubei"" :name (n2 / name :op1 ""Hubei"")))
    :op2 (p2 / position-01
            :ARG0 p
            :ARG1 6
            :manner (t / temporary))
    :op3 (s2 / score-01
            :ARG0 p
            :ARG1 (q / quantity :quant 342.60 :unit (p3 / point))))
"
18	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: An Iranian news agency reported that ahmadinejad stated Iran had 6000 working centrifuges but the agency subsequently removed the statement from the Internet.
AMR graph:"	"(r / report-01
      :ARG0 (a / agency
            :mod (n / news)
            :mod (c / country :wiki ""Iran"" :name (n2 / name :op1 ""Iran"")))
      :ARG1 (s / state-01
            :ARG0 (p / person :wiki ""Mahmoud_Ahmadinejad"" :name (n3 / name :op1 ""Ahmadinejad""))
            :ARG1 (h / have-03
                  :ARG0 c
                  :ARG1 (c2 / centrifuge :quant 6000
                        :ARG1-of (w / work-09))))
      :concession-of (r2 / remove-01
            :ARG0 a
            :ARG1 s
            :ARG2 (i / internet)
            :time (s2 / subsequent)))"	"
(r / report-01
    :ARG0 (a / agency
        :mod (n / news)
        :mod (p / person :name (n2 / name :op1 ""Iranian"")))
    :ARG1 (s / state-01
        :ARG0 (p2 / person :name (n3 / name :op1 ""Ahmadinejad""))
        :ARG1 (h / have-03
            :ARG0 (c / country :name (n4 / name :op1 ""Iran""))
            :ARG1 (c2 / centrifuge)
            :quant 6000
            :ARG2 (w / work-01)))
    :ARG1-of (r2 / remove-01
        :ARG0 a
        :ARG1 s
        :location (i / internet)))
"
19	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: What can you do to help us, please?
AMR graph:"	"(p / possible-01 :polite +
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (a / amr-unknown)
            :purpose (h / help-01
                  :ARG0 y
                  :ARG2 (w / we))))"	"
(p / possible-01
    :ARG1 (d / do-02
        :ARG0 (y / you)
        :ARG1 (a / amr-unknown)
        :purpose (h / help-01 :ARG0 y :ARG1 (w / we))
        :mode imperative))
"
20	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Senior Fellow at the International Institute for Strategic Studies mark Fitzpatrick stated that --
AMR graph:"	"(s / state-01
      :ARG0 (p / person :wiki -
            :name (n / name :op1 ""Mark"" :op2 ""Fitzpatrick"")
            :ARG0-of (h / have-org-role-91
                  :ARG1 (r / research-institute :wiki ""International_Institute_for_Strategic_Studies""
                        :name (n2 / name :op1 ""International"" :op2 ""Institute"" :op3 ""for"" :op4 ""Strategic"" :op5 ""Studies""))
                  :ARG2 (f / fellow
                        :mod (s2 / senior)))))"	"
(s / state-01
  :ARG0 (p / person
          :name (n / name :op1 ""Mark"" :op2 ""Fitzpatrick"")
          :ARG0-of (h / have-org-role-91
                      :ARG1 (o / organization
                              :name (n2 / name :op1 ""International"" :op2 ""Institute"" :op3 ""for"" :op4 ""Strategic"" :op5 ""Studies""))
                      :ARG2 (f / fellow :mod (s2 / senior)))))
"
21	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: m1456
AMR graph:"	"(s / string-entity :value ""m1456"")"	(m / amr-unknown)
22	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Iran is a signatory to the Nuclear Nonproliferation Treaty but not a member of the Nuclear Suppliers Group.
AMR graph:"	"(c / contrast-01
      :ARG1 (s / sign-02
            :ARG0 (c2 / country :wiki ""Iran""
                  :name (n / name :op1 ""Iran""))
            :ARG1 (t / treaty :wiki ""Treaty_on_the_Non-Proliferation_of_Nuclear_Weapons""
                  :name (n2 / name :op1 ""Nuclear"" :op2 ""Nonproliferation"" :op3 ""Treaty"")))
      :ARG2 (h / have-org-role-91 :polarity -
            :ARG0 c2
            :ARG1 (o / organization :wiki ""Nuclear_Suppliers_Group""
                  :name (n3 / name :op1 ""Nuclear"" :op2 ""Suppliers"" :op3 ""Group""))
            :ARG2 (m / member)))"	"
(a / and
    :op1 (s / signatory
            :domain (c / country :wiki ""Iran"" :name (n / name :op1 ""Iran""))
            :ARG2 (t / treaty :wiki ""Treaty_on_the_Non-Proliferation_of_Nuclear_Weapons""
                      :name (n2 / name :op1 ""Nuclear"" :op2 ""Nonproliferation"" :op3 ""Treaty"")))
    :op2 (c2 / contrast-01
            :ARG2 (m / member
                      :domain c
                      :ARG2 (g / group :wiki ""Nuclear_Suppliers_Group"" :name (n3 / name :op1 ""Nuclear"" :op2 ""Suppliers"" :op3 ""Group""))
                      :polarity -)))
"
23	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: We are in Delma a 1, in local pinson.
AMR graph:"	"(b / be-located-at-91
      :ARG1 (w / we)
      :ARG2 (p / pinson
            :mod (l / local)
            :location (r / road :wiki ""Delmas,_Ouest""
                  :name (n / name :op1 ""Delmas"" :op2 1))))"	"
(b / be-located-at-91 
    :ARG1 (w / we) 
    :ARG2 (l / location 
        :name (n / name :op1 ""Delma"" :op2 ""a"" :op3 ""1"")) 
    :location (p / pinson 
        :mod (l2 / local)))
"
24	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: 2007-06-18
AMR graph:"	"(d2 / date-entity
  :day 18
  :month 6
  :year 2007)"	"
(d / date-entity :year 2007 :month 6 :day 18)
"
25	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: How can we find help and food in fontamara 43 rue menos
AMR graph:"	"(h / have-manner-91
      :ARG1 (p / possible-01
            :ARG1 (f / find-01
                  :ARG0 (w / we)
                  :ARG1 (a2 / and
                        :op1 (h2 / help-01
                              :ARG2 w)
                        :op2 (f2 / food))
                  :location (s / street-address-91
                        :ARG2 (r / road :wiki -
                              :name (n / name :op1 ""Rue"" :op2 ""Menos"")))
                  :location (s2 / street-address-91
                        :ARG2 (r2 / road :wiki -
                              :name (n2 / name :op1 ""Fontamara"" :op2 43)))))
      :ARG2 (a / amr-unknown))"	"(f / find-01
    :ARG0 (w / we)
    :ARG1 (a / amr-choice
        :op1 (h / help)
        :op2 (f2 / food))
    :location (p / place
        :name (n / name :op1 ""Fontamara"" :op2 ""43"" :op3 ""Rue"" :op4 ""Menos""))
    :manner (p2 / possible-01)
    :polarity (a2 / amr-unknown))"
26	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: With regard to the situation in Palestine and Israel Wen stated that relevant UN resolutions must be implemented.
AMR graph:"	"(s / state-01
      :ARG0 (p / person :wiki ""Wen_Jiabao"" :name (n / name :op1 ""Wen""))
      :ARG1 (o / obligate-01
            :ARG2 (i / implement-01
                  :ARG1 (r / resolution
                        :mod (o2 / organization :wiki ""United_Nations"" :name (n4 / name :op1 ""UN""))
                        :ARG1-of (r2 / relevant-01))))
      :manner (r3 / regard-01
            :ARG0 p
            :ARG1 (s2 / situation
                  :location (a / and
                        :op1 (c / country :wiki ""State_of_Palestine"" :name (n2 / name :op1 ""Palestine""))
                        :op2 (c2 / country :wiki ""Israel"" :name (n3 / name :op1 ""Israel""))))))"	"
(s / state-01
    :ARG0 (p / person :name (n / name :op1 ""Wen""))
    :ARG1 (i / implement-01
        :ARG1 (r / resolution
            :mod (u / united-nations))
        :ARG0-of (r2 / relevant-01))
    :topic (a / and
        :op1 (s2 / situation
            :location (c / country :wiki ""Palestine"" :name (n2 / name :op1 ""Palestine"")))
        :op2 (s3 / situation
            :location (c2 / country :wiki ""Israel"" :name (n3 / name :op1 ""Israel""))))
    :mode (o / obligate-01))
"
27	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: At least three members of a family in Indias northeastern state of Tripura were hacked to death by a tribal mob for allegedly practicing witchcraft, police said Thursday.
AMR graph:"	"(h / hack-01
      :ARG0 (m / mob
            :mod (t2 / tribe))
      :ARG1 (m2 / member
            :part-of (f / family)
            :quant (a / at-least :op1 3))
      :location (s / state :wiki ""Tripura""
            :name (n / name :op1 ""Tripura"")
            :location (n3 / northeast
                  :part-of (c / country :wiki ""India""
                        :name (n2 / name :op1 ""India""))))
      :degree (d2 / die-01)
      :ARG1-of (c2 / cause-01
            :ARG0 (p2 / practice-01
                  :ARG0 m2
                  :ARG1 (w / witchcraft)
                  :ARG1-of (a3 / allege-01)))
      :ARG1-of (s2 / say-01
            :ARG0 (p3 / police)
            :time (d / date-entity
                  :weekday (t / thursday))))"	"
(s / say-01
  :ARG0 (p / police)
  :ARG1 (k / kill-01
    :ARG1 (m / mob
      :mod (t / tribal))
    :ARG2 (m2 / member
      :quant (a / at-least :op1 3)
      :part-of (f / family
        :location (s2 / state
          :name (n / name :op1 ""Tripura"")
          :part-of (c / country
            :wiki ""India""
            :name (n2 / name :op1 ""India"")))))
    :manner (h / hack-01)
    :purpose (p2 / practice-01
      :polarity -
      :ARG1 (w / witchcraft)))
  :time (d / date-entity :weekday (t2 / thursday)))
"
28	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: e.g. i'll say hello to someone from uni and they'll ignore me, but 30 minutes later they'll decide they want my help with some work... and i'll give it to them.
AMR graph:"	"(e / exemplify-01
      :ARG0 (c / contrast-01
            :ARG1 (a / and
                  :op1 (s / say-01
                        :ARG0 (i / i)
                        :ARG1 (h / hello)
                        :ARG2 (s2 / someone
                              :source (u / university)))
                  :op2 (i2 / ignore-01
                        :ARG0 s2
                        :ARG1 i))
            :ARG2 (a2 / and
                  :op1 (d / decide-01
                        :ARG0 s2
                        :ARG1 (w / want-01
                              :ARG0 s2
                              :ARG1 (h2 / help-01
                                    :ARG0 i
                                    :ARG1 (w2 / work-01
                                          :mod (s3 / some))
                                    :ARG2 s2))
                        :time (a3 / after
                              :op1 a
                              :quant (t / temporal-quantity :quant 30
                                    :unit (m2 / minute))))
                  :op2 (g / give-01
                        :ARG0 i
                        :ARG1 h2
                        :ARG2 s2))))"	"
(a / and
    :op1 (s / say-01
              :ARG0 (i / i)
              :ARG1 (h / hello)
              :ARG2 (p / person
                        :prep-from (u / university))
              :ARG2-of (i2 / ignore-01
                            :ARG0 p))
    :op2 (d / decide-01
              :ARG0 p
              :time (t / temporal-quantity
                          :quant 30
                          :unit (m3 / minute))
              :ARG1 (w / want-01
                        :ARG0 p
                        :ARG1 (h2 / help-01
                                  :ARG0 i
                                  :ARG1 (w2 / work)))
              :op3 (g / give-01
                        :ARG0 i
                        :ARG1 w2
                        :ARG2 p)))
"
29	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Anti-government insurgents have increased their violent activities across the Himalayan kingdom since the 9-month-long nationwide state of emergency expired at the end of August 2002.
AMR graph:"	"(i / increase-01
      :ARG0 (i2 / insurgent
            :ARG0-of (o / oppose-01
                  :ARG1 (g / government-organization
                        :ARG0-of (g2 / govern-01))))
      :ARG1 (a / activity-06
            :ARG0 i2
            :mod (v / violent))
      :location (a2 / across
            :op1 (k / kingdom
                  :location (w / world-region :wiki ""Himalayas"" :name (n / name :op1 ""Himalaya""))))
      :time (s / since
            :op1 (e2 / expire-01
                  :ARG1 (s2 / state
                        :mod (e3 / emergency)
                        :extent (n2 / nationwide)
                        :ARG1-of (l / long-03
                              :ARG2 (t2 / temporal-quantity :quant 9
                                    :unit (m2 / month))))
                  :time (e / end-01
                        :ARG1 (d / date-entity :year 2002 :month 8)))))"	"
(i / increase-01
  :ARG0 (p / person
    :ARG0-of (i2 / insurgent)
    :mod (a / anti)
    :mod (g / government))
  :ARG1 (a2 / activity
    :mod (v / violent))
  :location (k / kingdom
    :mod (r / region :name (n / name :op1 ""Himalayan"")))
  :time (s / since
    :op1 (e / expire-01
      :ARG1 (s2 / state
        :mod (e2 / emergency)
        :mod (s3 / state-of-emergency :duration (t / temporal-quantity :quant 9 :unit (m / month))
               :mod (n / nationwide)))
      :time (d / date-entity
        :month 8
        :year 2002
        :weekday (e3 / end)))))
"
30	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Xinhua News Agency , Seoul , August 31st , by reporter Shuifu Tang
AMR graph:"	"(b / byline-91
      :ARG0 (p / publication :wiki ""Xinhua_News_Agency""
            :name (n / name :op1 ""Xinhua"" :op2 ""News"" :op3 ""Agency""))
      :ARG1 (p2 / person :wiki -
            :name (n2 / name :op1 ""Shuifu"" :op2 ""Tang"")
            :ARG0-of (r / report-01))
      :location (c3 / city :wiki ""Seoul""
            :name (n3 / name :op1 ""Seoul""))
      :time (d2 / date-entity :month 8 :day 31))"	"
(a / announce-01
     :ARG0 (o / organization
           :wiki ""Xinhua_News_Agency""
           :name (n / name :op1 ""Xinhua"" :op2 ""News"" :op3 ""Agency""))
     :location (c / city
           :wiki ""Seoul""
           :name (n2 / name :op1 ""Seoul""))
     :time (d / date-entity
           :month 8
           :day 31)
     :medium (p / person
           :name (n3 / name :op1 ""Shuifu"" :op2 ""Tang"")))
"
31	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The six are all members of an outdoor sports club in Xining, Qinghai's provincial capital.
AMR graph:"	"(p / person :quant 6
      :domain (m / member
            :ARG1-of (i2 / include-91
                  :ARG2 (c / club
                        :mod (s / sport)
                        :mod (o / outdoors)))
            :mod (a / all)
            :location (c2 / city :wiki ""Xining"" :name (n / name :op1 ""Xining"")
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (p2 / province :wiki ""Qinghai"" :name (n2 / name :op1 ""Qinghai""))
                        :ARG2 (c3 / capital)))))"	"
(m / member :ARG0-of (b / be-01 :ARG1 (p / person :quant 6 :mod (a / all))) :location (c / club :mod (s / sport :mod (o / outdoor))) :location (c2 / city :wiki ""Xining"" :name (n / name :op1 ""Xining"") :location (p2 / province :wiki ""Qinghai"" :name (n2 / name :op1 ""Qinghai""))))
"
32	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Why is it so hard to understand ?
AMR graph:"	"(h / hard-02
      :ARG1 (u / understand-01
            :ARG1 (i / it))
      :ARG1-of (c / cause-01
            :ARG0 (a / amr-unknown))
      :degree (s / so))"	"
(a / amr-unknown 
   :ARG1-of (u / understand-01 
      :ARG0 (i / it) 
      :manner (h / hard-02 
         :degree (s / so))))
"
33	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The deal would most likely have remained secret had the pirates not hijacked the ship and begun speaking to the media by satellite phone.
AMR graph:"	"(l / likely-01
      :ARG1 (r / remain-01
            :ARG1 (d / deal-01)
            :ARG3 (s / secret))
      :condition (a / and
            :op1 (h / hijack-01 :polarity -
                  :ARG0 (p / pirate)
                  :ARG1 (s2 / ship))
            :op2 (b / begin-01 :polarity -
                  :ARG0 p
                  :ARG1 (s3 / speak-01
                        :ARG0 p
                        :ARG2 (m2 / media)
                        :medium (p2 / phone
                              :mod (s4 / satellite)))))
      :ARG2-of (h2 / have-degree-91
            :ARG1 r
            :ARG3 (m / most)))"	"
(r / remain-01
  :ARG1 (d / deal)
  :mod (l / likely-02 :degree (m / most))
  :condition
    (a / and
      :op1 (h / hijack-01
          :ARG0 (p / pirate)
          :ARG1 (s / ship)
          :polarity -)
      :op2 (b / begin-01
          :ARG0 p
          :ARG1 (s2 / speak-01
              :ARG0 p
              :ARG1 (m2 / media)
              :manner (p2 / phone
                  :mod (s3 / satellite))))))
"
34	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The implication was that corrupt or sympathetic members of the Venezuelan military may be aiding guerrillas.
AMR graph:"	"(i / imply-01
      :ARG1 (p / possible-01
            :ARG1 (a / aid-01
                  :ARG0 (o / or
                        :op1 (p2 / person
                              :ARG0-of (h / have-org-role-91
                                    :ARG1 (m3 / military
                                          :mod (c2 / country :wiki ""Venezuela""
                                                :name (n / name :op1 ""Venezuela"")))
                                    :ARG2 (m / member))
                              :ARG1-of (c / corrupt-01))
                        :op2 (p3 / person
                              :ARG0-of (h2 / have-org-role-91
                                    :ARG1 m3
                                    :ARG2 (m2 / member))
                              :ARG0-of (s / sympathize-01)))
                  :ARG2 (g / guerrilla))))"	"
(i / imply-01
      :ARG1 (c / corrupt-01
            :polarity (a3 / amr-choice
                  :op1 (o / organize-01
                        :ARG1 (m / member
                              :location (m2 / military
                                    :mod (c2 / country
                                          :wiki ""Venezuela""
                                          :name (n / name :op1 ""Venezuelan"")))))
                  :op2 (p / sympathetic))))
      :ARG2 (a2 / aid-01
            :ARG0 (m3 / member
                  :location m2)
            :ARG1 (g / guerrilla)))
"
35	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The Vietnam-Germany trade volume rose 7.7 percent in 2003 to reach 1.4 billion dollars, of which 815.4 million dollars came from Vietnamese exports.
AMR graph:"	"(r / rise-01
      :ARG1 (v / volume
            :mod (t / trade-01
                  :ARG0 (c / country :wiki ""Vietnam"" :name (n / name :op1 ""Vietnam""))
                  :ARG2 (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany""))))
      :ARG2 (p / percentage-entity :value 7.7)
      :ARG4 (r2 / reach-01
            :ARG0 v
            :ARG1 (m / monetary-quantity :quant 1400000000
                  :unit (d2 / dollar)
                  :ARG2-of (i / include-91
                        :ARG1 (m2 / monetary-quantity :quant 815400000
                              :ARG1-of (c3 / come-03
                                    :ARG2 (e / export-01
                                          :ARG0 c))
                              :unit (d3 / dollar)))))
      :time (d / date-entity :year 2003))"	"
(r / rise-01
    :ARG1 (v / volume
        :mod (t / trade-01
            :ARG0 (c / country :wiki ""Vietnam"" :name (n / name :op1 ""Vietnam""))
            :ARG1 (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany""))))
    :ARG2 (p / percentage-entity :value 7.7)
    :time (d / date-entity :year 2003)
    :ARG1-of (r2 / reach-01
        :ARG2 (m / monetary-quantity :quant 1.4 :unit (b2 / billion) :poss (d2 / dollar)))
    :ARG3 (e / export-01
        :ARG0 (c3 / country :wiki ""Vietnam"" :name (n3 / name :op1 ""Vietnam""))
        :extent (m2 / monetary-quantity :quant 815.4 :unit (m3 / million) :poss (d3 / dollar))))
"
36	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Thank you.
AMR graph:"	"(t / thank-01
      :ARG0 (i / i)
      :ARG1 (y / you))"	"
(t / thank-01 :ARG0 (i / i) :ARG1 (y / you))
"
37	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Crime; weapons; international; money
AMR graph:"	"(a / and
      :op1 (c / crime-02)
      :op2 (w / weapon)
      :op3 (i / international)
      :op4 (m / money))"	"
(a / and :op1 (c / crime) :op2 (w / weapon) :op3 (i / international) :op4 (m / money))
"
38	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: That's normal, it has always been the case that a whore is heartless and a performer is unrighteous
AMR graph:"	"(m / multi-sentence
      :snt1 (n / normal-02
            :ARG1 (t / that))
      :snt2 (a / and
            :op2 (a2 / and
                  :op1 (h / heartless
                        :domain (w2 / whore))
                  :op2 (r / righteous-07 :polarity -
                        :ARG1 (p2 / person
                              :ARG0-of (p3 / perform-01)))
                  :time (a3 / always))))"	"
(a / and
      :op1 (h / heartless :domain
                  (w / whore))
      :op2 (u / unrighteous :domain
                  (p / performer)))
"
39	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Some of these flights were innocent violations by ranchers in the Amazon flying between plantations.
AMR graph:"	"(f2 / fly-01
      :mod (s / some)
      :ARG1-of (i2 / include-91
            :ARG2 (f3 / fly-01
                  :mod (t2 / this)))
      :ARG1-of (v2 / violate-01
            :ARG0 (p / person
                  :ARG0-of (r / ranch-01)
                  :ARG1-of (f / fly-01
                        :location (b / between
                              :op1 (p3 / plantation)))
                  :location (w / world-region :wiki ""Amazon_basin""
                        :name (n / name :op1 ""Amazon"")))
            :ARG1-of (i / innocent-01)))"	"
(v / violate-01
    :ARG1 (f / flight :quant (s / some) :mod (t / this))
    :ARG0 (r / rancher :location (a / amazon))
    :mod (i / innocent)
    :manner (f2 / fly-01 :ARG0 r :ARG4 (b / between :op1 (p / plantation) :op2 (p2 / plantation))))
"
40	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: What can I do about this?
AMR graph:"	"(a / amr-unknown
      :ARG1-of (d / do-02
            :ARG0 (i / i)
            :ARG2 (t / this)
            :ARG1-of (p / possible-01)))"	"
(d / do-02
    :ARG0 (i / i)
    :ARG1 (a / amr-unknown)
    :purpose (a2 / amr-unknown :ARG1-of (a3 / about-06 :op1 (t / this)))
    :polarity (a4 / amr-unknown))
"
41	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: We need water to drink.
AMR graph:"	"(n / need-01
      :ARG0 (w / we)
      :ARG1 (w2 / water
            :purpose (d / drink-01
                        :ARG0 w
                        :ARG1 w2)))"	"
(n / need-01
    :ARG0 (w / we)
    :ARG1 (w2 / water
        :purpose (d / drink-01
            :ARG0 w)))
"
42	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: He went on to recall that as his parents had been swept away by tidal wave at the start of the tragedy, he was left alive alone.
AMR graph:"	"(a2 / and
      :op1 (r / recall-02
            :ARG0 (h / he)
            :ARG1 (s / sweep-01
                  :ARG0 (w / wave
                        :mod (t / tide))
                  :ARG1 (p / parent
                        :poss h)
                  :manner (a / away)
                  :time (s2 / start-01
                        :ARG0 (t2 / tragedy))))
      :op2 (l / leave-12
            :ARG1 h
            :ARG2 (a3 / alone
                  :mod (l2 / live-01
                        :ARG0 h))))"	"(r / recall-01
      :ARG0 (h / he)
      :ARG1 (l / leave-04 
            :ARG1 h 
            :ARG2 (a / alone))
      :ARG1-of (s / sweep-away-01
            :ARG1 (p / parent 
                  :poss h)
            :ARG2 (t / tidal-wave)
            :time (s2 / start-02 
                  :ARG1 (t2 / tragedy))))"
43	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Does she even have a history of mental illness or a diagnosis?
AMR graph:"	"(h / have-03
      :ARG0 (s / she)
      :ARG1 (o / or
            :op1 (h2 / history
                  :consist-of (i / ill-01
                        :ARG1 s
                        :ARG2 (m / mental)))
            :op2 (d / diagnose-01
                  :ARG1 s))
      :mod (e / even)
      :polarity (a / amr-unknown))"	"
(h / have-03
    :ARG0 (s / she)
    :ARG1 (a / amr-choice
        :op1 (h2 / history
            :mod (d / disease-disorder :mod (m / mental)))
        :op2 (d2 / diagnose-01 :ARG1 (d / disease-disorder :mod (m / mental))))
    :polarity (a2 / amr-unknown)
    :concession (e / even))
"
44	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: I do n't think you can blame 288 for creating those people .
AMR graph:"	"(t / think-01
      :ARG0 (i / i)
      :ARG1 (r / recommend-01 :polarity -
            :ARG1 (b / blame-01
                  :ARG0 (y / you)
                  :ARG1 (r2 / road :wiki ""Virginia_State_Route_288"" :name (x / name :op1 ""288""))
                  :ARG2 (c / create-01
                        :ARG1 (p / person
                              :mod (t2 / that))))
            :ARG2 y))"	"
(t / think-01 
    :ARG0 (i / i) 
    :ARG1 (b / blame-01 
        :ARG0 (y / you) 
        :ARG1 (p / person :quant 288) 
        :ARG2 (c / create-01 
            :ARG0 288 
            :ARG1 (p2 / people :mod (t2 / that)))))
    :polarity -)
"
45	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The Immigrations Bureau stated that they only recently received intelligence reports on Hambali's record in the country.
AMR graph:"	"(s / state-01
      :ARG0 (g / government-organization :wiki -
            :name (n / name :op1 ""Immigrations"" :op2 ""Bureau""))
      :ARG1 (r / receive-01
            :ARG0 g
            :ARG1 (r2 / report-01
                  :ARG0 (i / intelligence)
                  :ARG1 (r3 / record-01
                        :ARG0 (p / person :wiki ""Riduan_Isamuddin""
                              :name (n2 / name :op1 ""Hambali""))
                        :location (c / country))
                  :ARG2 g)
            :time (r4 / recent
                  :mod (o2 / only))))"	"
(s / state-01
    :ARG0 (b / bureau
            :mod (i / immigrate-01))
    :ARG1 (r / receive-01
            :ARG0 (t / they)
            :ARG1 (r2 / report
                    :ARG1-of (i2 / intelligence-01)
                    :topic (r3 / record
                            :poss (p / person
                                    :name (n / name :op1 ""Hambali"")))
                    :location (c / country))
            :manner (o / only)
            :time (r4 / recent)))
"
46	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: 2008-10-08
AMR graph:"	(d / date-entity :year 2008 :month 10 :day 8)	"
(d / date-entity :year 2008 :month 10 :day 8)
"
47	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: 09/02/2010 13:25
AMR graph:"	"(d / date-entity :time ""13:25"" :day 9 :month 2 :year 2010)"	" 
(d / date-entity :year 2010 :month 9 :day 2 :time ""13:25"")
"
48	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: The daily newspaper O Estado de Sao Paolo stated in an editorial the week of 20040718-20040824 -- the extreme measure raises ethical and juridical problems exceeding any potential benefits.
AMR graph:"	"(s / state-01
      :ARG0 (n / newspaper :wiki ""O_Estado_de_S._Paulo"" :name (n2 / name :op1 ""O"" :op2 ""Estado"" :op3 ""de"" :op4 ""Sao"" :op5 ""Paolo"")
            :frequency (r2 / rate-entity-91
                  :ARG3 (t / temporal-quantity :quant 1
                        :unit (d3 / day))))
      :ARG1 (r / raise-01
            :ARG0 (m / measure-02
                  :mod (e / extreme))
            :ARG1 (a / and
                  :op1 (p / problem
                        :topic (e2 / ethics)
                        :ARG0-of (e3 / exceed-01
                              :ARG1 (b / benefit-01
                                    :mod (p3 / potential)
                                    :mod (a2 / any))))
                  :op2 (p2 / problem
                        :topic (j / juridical)
                        :ARG0-of e3)))
      :medium (e4 / editorial)
      :time (w / week
            :mod (d4 / date-interval
                  :op1 (d / date-entity :year 2004 :month 7 :day 18)
                  :op2 (d2 / date-entity :year 2004 :month 7 :day 24))))"	" 
(s / state-01
    :ARG0 (n / newspaper
        :wiki ""O_Estado_de_S._Paulo""
        :name (n2 / name :op1 ""O"" :op2 ""Estado"" :op3 ""de"" :op4 ""Sao"" :op5 ""Paulo"")
        :mod (d / daily))
    :ARG1 (p / problem
        :mod (e / extreme
            :ARG1-of (r / raise-01
                :ARG1 (m / measure)))
        :mod (j / juridical :op1 (p2 / problem))
        :mod (e2 / ethical :op1 (p3 / problem))
        :ARG2-of (e3 / exceed-01
            :ARG1 (b / benefit
                :ARG1-of (p4 / potential)))
    :location (e4 / editorial)
    :time (d2 / date-interval
        :op1 (d3 / date-entity :year 2004 :month 7 :day 18)
        :op2 (d4 / date-entity :year 2004 :month 8 :day 24)))
"
49	"You are an expert in Abstract Meaning Representation (AMR) parsing. Generate AMR graph according to the following rules:

## Part I. Introduction

- AMR = **rooted, directed, acyclic graph** encoding “who did what to whom.”
- Abstract, cross-sententially reusable, closer to semantics than syntax.
- Uses **OntoNotes** predicate senses (e.g., `want-01`, `believe-01`).
- The **root** acts as overall **focus**.

### Core example
Input: The boy wants the girl to believe him  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 (g / girl) :ARG1 b))`

(Variables `w, b, b2, g` refer to nodes; `b` is reused to encode coreference.)

---

## Abstraction away from English (concepts, not words)

Input: The girl adjusted the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The girl made adjustments to the machine  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The machine was adjusted by the girl  
AMR graph: `(a / adjust-01 :ARG0 (g / girl) :ARG1 (m / machine))`

Input: The killing happened yesterday  
AMR graph: `(k / kill-01 :time (y / yesterday))`

Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: both the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: his boat  
AMR graph: `(b / boat :poss (h / he))`

Input: his own boat  
AMR graph: `(b / boat :poss (h / he))`

---

## More logical than syntax (modals & negation placement)

Input: The boy must not go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy may not go  
AMR graph: `(p / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

---

## Focus (root choice changes what the sentence is “about”)

Input: The marble is white  
AMR graph: `(w / white-03 :ARG1 (m / marble))`

Input: the white marble  
AMR graph: `(m / marble :ARG1-of (w / white-03))`

Input: The boy sees that the marble is white  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (w / white-03 :ARG1 (m / marble)))`

Input: The boy sees the white marble  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (m / marble :ARG1-of (w / white-03)))`

Input: The boy saw the girl who wanted him  
AMR graph: `(s / see-01 :ARG0 (b / boy) :ARG1 (g / girl :ARG0-of (w / want-01 :ARG1 b)))`

(Input: “The girl who was seen by the boy wants him” can be focused by lifting `want-01` to root:
AMR graph: `(w / want-01 :ARG0 (g / girl :ARG1-of (s / see-01 :ARG0 (b / boy))) :ARG1 b)`)

Input: The regulatory documents were changed  
AMR graph: `(c / change-01 :ARG1 (d / document :instrument-of (r / regulate-01)))`

---

## AMR slogans
- Single, traversable DAG of meaning.
- No processing prescription.
- Not an interlingua.
- Not nouns vs. verbs; it’s events/objects/properties.
- Multiple English realizations per AMR; alignments optional.

---

## Limitations of AMR 1.2
- English-leaning.
- No explicit quantifier scope or universal quantification.
- No cross-sentence coreference (in 1.2).
- Often drops number/tense/aspect/quotes.
- Lacks deep domain frames.

---

# Part II. Concepts and Relations

Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

- **Core roles**: `:ARG0 … :ARG5` (predicate-specific, from OntoNotes).
- **Non-core roles**: `:time, :location, :manner, :purpose, :cause, :topic, :instrument, :duration, :source, :destination, :path, :degree, :frequency, :extent, :example, :consist-of, :part, :subevent, :direction, :beneficiary, :accompanier, :medium, :mod, :quant, :value, :poss, :polarity, :ord, :name, :wiki, :scale, :unit, :range, :li, :domain`, etc.
- **Conjunction slots**: `:op1, :op2, …` (and for some prepositions).
- **Inverses**: every role has `-of`.

---

# Part III. Phenomena

## Core roles (predicate-sensitive)
Input: He described the mission as a failure  
AMR graph: `(d / describe-01 :ARG0 (h / he) :ARG1 (m / mission) :ARG2 (f / fail-01))`

Input: a band of marauders  
AMR graph: `(b / band :consist-of (p / person :ARG0-of (m / maraud-00)))`

---

## Modality
Input: The boy can go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy must go  
AMR graph: `(o / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)))`

Input: The boy may go  
AMR graph: `(o / permit-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: It may/might rain / Rain is possible  
AMR graph: `(p / possible-01 :ARG1 (r / rain-01))`

Input: The boy should go / It is recommended that the boy go  
AMR graph: `(r / recommend-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy is likely to go  
AMR graph: `(l / likely-01 :ARG1 (g / go-02 :ARG0 (b / boy)))`

Input: The boy would rather go  
AMR graph: `(p / prefer-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: I am used to working  
AMR graph: `(u / use-02 :ARG0 (i / i) :ARG1 (w / work-01 :ARG0 i))`

---

## Negation (via `:polarity -`)
Input: The boy doesn’t go  
AMR graph: `(g / go-02 :ARG0 (b / boy) :polarity -)`

Input: The boy can’t go / It’s not possible for the boy to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: It is possible for the boy not to go  
AMR graph: `(p / possible-01 :ARG1 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy doesn’t have to go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy)) :polarity -)`

Input: The boy must not go  
AMR graph: `(p / obligate-01 :ARG2 (g / go-02 :ARG0 (b / boy) :polarity -))`

Input: The boy thinks his team won’t win  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b) :polarity -))`

Input: The boy doesn’t think his team will win (truth negated)  
AMR graph: `(t / think-01 :ARG0 (b / boy) :ARG1 (w / win-01 :ARG0 (t2 / team :poss b)) :polarity -)`

Input: I don’t have any money / I have no money  
AMR graph: `(h / have-03 :polarity - :ARG0 (i / i) :ARG1 (m / money))`

Input: the dress is inappropriate / the dress is not appropriate  
AMR graph: `(a / appropriate-02 :polarity - :ARG1 (d / dress))`

Input: the inappropriate dress / the dress that is not appropriate  
AMR graph: `(d / dress :ARG1-of (a / appropriate-02 :polarity -))`

---

## Questions (`amr-unknown` in place)
Input: What did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown))`

Input: Where did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :location (a / amr-unknown))`

Input: How did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :manner (a / amr-unknown))`

Input: Whose toy did the girl find?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (t / toy :poss (a / amr-unknown)))`

Input: How fast did the girl run?  
AMR graph: `(r / run-01 :ARG0 (g / girl) :manner (f / fast :degree (a / amr-unknown)))`

Input: What purple thing did the girl see?  
AMR graph: `(s / see-01 :ARG0 (g / girl) :ARG1 (a / amr-unknown :ARG1-of (p / purple-02)))`

Input: Which investigation did she lead?  
AMR graph: `(l / lead-01 :ARG0 (s / she) :ARG1 (a / amr-unknown :domain (i / investigate-01)))`

(Yes/No via `:polarity (amr-unknown)`)

Input: Did the girl find the boy?  
AMR graph: `(f / find-01 :ARG0 (g / girl) :ARG1 (b / boy) :polarity (a / amr-unknown))`

Input: Was the boy found?  
AMR graph: `(f / find-01 :ARG1 (b / boy) :polarity (a / amr-unknown))`

(Relative/interrogative embeds with inverse roles)

Input: I know who you saw / I know the person you saw  
AMR graph: `(k / know-02 :ARG0 (i / i) :ARG1 (p / person :ARG1-of (s / see-01 :ARG0 (y / you))))`

Input: The boy doesn’t know whether the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (t / truth-value :polarity-of (c / come-01 :ARG1 (g / girl))))`

Input: The boy doesn’t know that the girl came  
AMR graph: `(k / know-01 :polarity - :ARG0 (b / boy) :ARG1 (c / come-01 :ARG1 (g / girl)))`

---

## Choice questions (`amr-choice`)
Input: Do you want tea or coffee?  
AMR graph: `(w / want-01 :ARG0 (y / you) :ARG1 (a / amr-choice :op1 (t / tea) :op2 (c / coffee)))`

Input: Should I stay or should I go?  
AMR graph: `(r / recommend-01 :ARG1 (a / amr-choice :op1 (s / stay-01 :ARG1 (i / i)) :op2 (g / go-02 :ARG0 i)))`

---

## Imperatives and expressive mode
Input: Go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (y / you))`

Input: Let’s go!  
AMR graph: `(g / go-02 :mode imperative :ARG0 (w / we))`

Input: Yippee!  
AMR graph: `(y / yippee :mode expressive)`

Input: Yes!!! (celebratory)  
AMR graph: `(y / yes :mode expressive)`

---

## Articles, plurals, tense, quotes, hyphens
Input: The boy went / goes / will go / A boy went / The boys went  
AMR graph: `(g / go-02 :ARG0 (b / boy))`

(Demonstratives)

Input: that boy / those boys  
AMR graph: `(b / boy :mod (t / that))`

Input: this boy / these boys  
AMR graph: `(b / boy :mod (t / this))`

(Demonstrative pronoun)

Input: that is a shame  
AMR graph: `(s / shame :domain (t / that))`

(Hyphens)

Input: money-market account  
AMR graph: `(a / account :mod (m / market :mod (m2 / money)))`

Input: vice president / vice-president  
AMR graph: `(p / president :mod (v / vice))`

Input: brother-in-law  
AMR graph: `(b / brother-in-law)`

---

## Implicit roles (world knowledge fills roles)
Input: He was charged with public intoxication and resisting arrest  
AMR graph: `(c / charge-05 :ARG1 (h / he) :ARG2 (a / and :op1 (i / intoxicate-01 :ARG1 h :location (p / public)) :op2 (r / resist-01 :ARG0 h :ARG1 (a2 / arrest-01 :ARG1 h))))`

---

## Implicit concepts (generally avoided except NE types)
(no explicit extra example beyond NE section below)

---

## Main verb “be”
(Predicate adjectives with `:domain` unless verb frame exists)

Input: The marble is small  
AMR graph: `(s / small :domain (m / marble))`

(Noun is noun)

Input: The man is a lawyer  
AMR graph: `(l / lawyer :domain (m / man))`

Input: the man who is a lawyer  
AMR graph: `(m / man :mod (l / lawyer))`

(Existentials)

Input: There is a boy / the boy  
AMR graph: `(b / boy)`

Input: There are four boys making pies / four boys making pies  
AMR graph: `(b / boy :quant 4 :ARG0-of (m / make-01 :ARG1 (p / pie)))`

---

## Nouns that invoke predicates (nominalizations, -er nouns)
Input: The boy destroyed the room  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: The boy’s destruction of the room / The destruction of the room by the boy  
AMR graph: `(d / destroy-01 :ARG0 (b / boy) :ARG1 (r / room))`

Input: the explosion  
AMR graph: `(e / explode-01)`

Input: the proposal / the thing proposed / what got proposed  
AMR graph: `(t / thing :ARG1-of (p / propose-01))`

Input: the boy’s opinion / the opinion of the boy / what the boy opined  
AMR graph: `(t / thing :ARG1-of (o / opine-01 :ARG0 (b / boy)))`

(-er nouns via inverse roles)

Input: chip maker / maker of chips  
AMR graph: `(o / organization :ARG0-of (m / make-01) :ARG1 (c / chip))`  [Note: guide shows preferred inverse structure; often simplified as `(p/person :ARG0-of (make-01 :ARG1 chip))`.]

Input: investor  
AMR graph: `(p / person :ARG0-of (i / invest-01))`

Input: bond investor  
AMR graph: `(p / person :ARG0-of (i / invest-01 :ARG2 (b / bond)))`

Input: small investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (s / small))`

Input: nerdy investor  
AMR graph: `(p / person :ARG0-of (i / invest-01) :mod (n / nerd))`

(But not all -er nouns: treasurer, president)

Input: treasurer  
AMR graph: `(t / treasurer)`

Input: president  
AMR graph: `(p / president)`

(Hard worker → works hard)

Input: the boy is a hard worker / the boy works hard  
AMR graph: `(w / work-01 :ARG0 (b / boy) :manner (h / hard-02))`

---

## Adjectives that invoke predicates
Input: the attractive man  
AMR graph: `(m / man :ARG0-of (a / attract-01))`

Input: the man is attractive / the man attracts  
AMR graph: `(a / attract-01 :ARG0 (m / man))`

Input: the man is attractive to women / the man attracts women  
AMR graph: `(a / attract-01 :ARG0 (m / man) :ARG1 (w / woman))`

(Adjectives with natural verbs)

Input: The soldier was aware of the battle (≈ realized)  
AMR graph: `(a / realize-01 :ARG0 (s / soldier) :ARG1 (b / battle))`

(Adjectives without natural verbs)

Input: The boy is responsible for the work  
AMR graph: `(r / responsible-03 :ARG0 (b / boy) :ARG1 (w / work))`

(State vs. causing verb)

Input: The girl is sad  
AMR graph: `(s / sad-02 :ARG1 (g / girl))`

Input: The girl was saddened by the disaster  
AMR graph: `(s / sadden-01 :ARG0 (d / disaster) :ARG1 (g / girl))`

(“-ed” adjectives)

Input: the boy is acquainted with magic  
AMR graph: `(a / acquaint-01 :ARG1 (b / boy) :ARG2 (m / magic))`

(Idiomatic passive participles)

Input: X is fed up with Y  
AMR graph: `(f / feed-03 :ARG1 (x / x) :ARG2 (y / y))`  [ARG0 (feeder) typically unspecified.]

(Control/raising with adjectives)

Input: Boys want to please  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (p / please-01 :ARG0 b))`

Input: Girls are easy to please / It is easy to please girls / Pleasing girls is easy  
AMR graph: `(e / easy-05 :ARG1 (p / please-01 :ARG1 (g / girl)))`

(“-able”, “-ful” when decomposable)

Input: an edible sandwich / a sandwich that can be eaten  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01)))`

Input: an inedible sandwich  
AMR graph: `(s / sandwich :ARG1-of (e / eat-01 :ARG1-of (p / possible-01 :polarity -)))`

Input: a taxable fund  
AMR graph: `(f / fund :ARG3-of (t / tax-01 :ARG1-of (p / possible-01)))`

---

## Adverbs with -ly (stemmed to adjective)
Input: I observed that the army moved quickly / I observed the quick movement of the army / I observed the army moving quickly  
AMR graph: `(o / observe-01 :ARG0 (i / i) :ARG1 (m / move-01 :ARG0 (a / army) :manner (q / quick-02)))`

(“hardly” ≠ “hard”; already captured elsewhere)

---

## Non-core roles (with examples)

### :source / :destination / :path / :direction
Input: He drove west, from Houston to Austin  
AMR graph: `(d / drive-01 :ARG0 (h / he) :direction (w / west) :source (c / city :wiki ""Houston"" :name (n / name :op1 ""Houston"")) :destination (c2 / city :wiki ""Austin,_Texas"" :name (n2 / name :op1 ""Austin"")))`

Input: I drove to Indianapolis on I-65  
AMR graph: `(d / drive-01 :ARG0 (i / i) :destination (c / city :wiki ""Indianapolis"" :name (n / name :op1 ""Indianapolis"")) :path (r / road :wiki ""Interstate_65"" :name (n2 / name :op1 ""I-65"")))`

Input: I drove through the tunnel  
AMR graph: `(d / drive-01 :ARG0 (i / i) :path (t / tunnel))`

### :beneficiary / :accompanier
Input: The soldier hummed a tune for the girl as he walked with her to town  
AMR graph: `(s / hum-02 :ARG0 (s2 / soldier) :ARG1 (t2 / tune) :beneficiary (g / girl) :time (w / walk-01 :ARG0 g :accompanier s2 :destination (t / town)))`

### :topic
Input: There is no information about the case  
AMR graph: `(i / information :polarity - :topic (c / case))`

Input: USC Associate Professor for Mathematics Jay Bartroff  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Jay"" :op2 ""Bartroff"") :ARG0-of (h / have-org-role-91 :ARG1 (u / university :wiki ""University_of_Southern_California"" :name (n2 / name :op1 ""USC"")) :ARG2 (p2 / professor :mod (a / associate) :topic (m / mathematics))))`

### :duration
Input: He worked for two hours  
AMR graph: `(w / work-01 :ARG0 (h / he) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour)))`

### :instrument
Input: I ate pasta with a fork  
AMR graph: `(e / eat-01 :ARG0 (i / i) :ARG1 (p / pasta) :instrument (f / fork))`

Input: Iraq launched a missile attack  
AMR graph: `(a / attack-01 :ARG0 (c / country :wiki ""Iraq"" :name (n / name :op1 ""Iraq"")) :instrument (m / missile))`

### :medium
Input: She talked to him in French  
AMR graph: `(t / talk-01 :ARG0 (s / she) :ARG2 (h / he) :medium (l / language :wiki ""French_language"" :name (n / name :op1 ""French"")))`

Input: John announced the birth of his son on Twitter  
AMR graph: `(a / announce-01 :ARG0 (p / person :wiki - :name (n / name :op1 ""John"")) :ARG1 (b / bear-02 :ARG1 (p2 / person :ARG0-of (h / have-rel-role-91 :ARG1 p :ARG2 (s / son)))) :medium (p3 / product :wiki ""Twitter"" :name (n2 / name :op1 ""Twitter"")))`

### :manner (incl. means)
Input: The boy sang very beautifully  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very)))`

Input: He decorated the room in a creative way  
AMR graph: `(d / decorate-01 :ARG0 (h / he) :ARG1 (r / room) :manner (c / creative))`

Input: The mayor proposed to lower crime by hiring more police officers  
AMR graph: `(p / propose-01 :ARG0 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG2 (m / mayor))) :ARG1 (l / lower-05 :ARG1 (c / crime) :manner (h / hire-01 :ARG2 (p4 / person :ARG0-of (h3 / have-org-role-91 :ARG1 (p2 / police) :ARG2 (o / officer)) :mod (m2 / more)))))`

Input: Nicole went to England by train  
AMR graph: `(g / go-02 :ARG0 (p / person :wiki - :name (n / name :op1 ""Nicole"")) :ARG4 (c / country :wiki ""England"" :name (n2 / name :op1 ""England"")) :manner (t / train))`

### :purpose / :cause / :concession / :condition
Input: He went to the store to buy wood for a new fence  
AMR graph: `(g / go-02 :ARG0 (h / he) :ARG4 (s / store) :purpose (b / buy-01 :ARG0 h :ARG1 (w / wood :purpose (f / fence :mod (n / new)))))`

Input: The boy murmured softly to soothe the girl, because he worried about her  
AMR graph: `(m / murmur-01 :ARG0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :ARG1 (g / girl)) :cause (w / worry-01 :ARG0 b :topic g))`

Input: The game continued although it rained / despite the rain  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (r / rain-01))`

Input: The game will continue even if it rains  
AMR graph: `(c / continue-01 :ARG1 (g / game) :concession (e / even-if :op1 (r / rain-01)))`

Input: They feared him even when he was behind bars  
AMR graph: `(f / fear-01 :ARG0 (t / they) :ARG1 (h / he) :concession (e / even-when :op1 (i / imprison-01 :ARG1 h)))`

Input: The boy will sing if he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

Input: The boy will sing unless he is given money  
AMR graph: `(s / sing-01 :ARG0 (b / boy) :polarity - :condition (g / give-01 :ARG1 (m / money) :ARG2 b))`

(Cause-of shortcut)

Input: The torpedo struck, causing the ship to be damaged  
AMR graph: `(s / strike-01 :ARG0 (t / torpedo) :cause-of (d / damage-01 :ARG1 (s2 / ship)))`

### :part / :subevent / :consist-of / :example / :frequency / :extent
Input: the engine of the car / the car’s engine  
AMR graph: `(e / engine :part-of (c / car))`

Input: the south of France / southern France  
AMR graph: `(s / south :part-of (c / country :wiki ""France"" :name (n / name :op1 ""France"")))`

Input: The boy won the race in the Olympics  
AMR graph: `(w / win-01 :ARG0 (b / boy) :ARG1 (r / race-01 :subevent-of (g / game :wiki ""Olympic_Games"" :name (n / name :op1 ""Olympics""))))`

Input: a ring of gold  
AMR graph: `(r / ring :consist-of (g / gold))`

Input: a team of monkeys  
AMR graph: `(t / team :consist-of (m / monkey))`

Input: companies like IBM and Google  
AMR graph: `(c / company :example (a / and :op1 (c2 / company :wiki ""IBM"" :name (n / name :op1 ""IBM"")) :op2 (c3 / company :wiki ""Google"" :name (n2 / name :op1 ""Google""))))`

Input: We met three times  
AMR graph: `(m / meet-03 :frequency 3 :ARG0 (w / we))`

Input: twice a year  
AMR graph: `(r / rate-entity-91 :ARG1 2 :ARG2 (t / temporal-quantity :quant 1 :unit (y / year)))`

Input: We play bridge every Wednesday afternoon  
AMR graph: `(p / play-01 :ARG0 (w / we) :ARG1 (b / bridge) :frequency (r / rate-entity-91 :ARG4 (d / date-entity :weekday (w2 / wednesday) :dayperiod (a / afternoon))))`

Input: The road goes on forever  
AMR graph: `(g / go-on-15 :ARG1 (r / road) :extent (f / forever))`

---

## Prepositions (time/location PPs)
Input: The nation defaulted in June  
AMR graph: `(s / default-01 :ARG1 (n / nation) :time (d / date-entity :month 6))`

Input: The man died in his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (h / house :poss m))`

Input: The nation defaulted after the war  
AMR graph: `(s / default-01 :ARG0 (n / nation) :time (b / after :op1 (w / war-01)))`

Input: The man died near his house  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (n / near :op1 (h / house :poss m)))`

Input: The man died between the house and the river  
AMR graph: `(d / die-01 :ARG1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river)))`

Input: He was sued in the case  
AMR graph: `(s / sue-01 :ARG1 (h / he) :prep-in (c / case))`

Input: The brief was filed on behalf of the government  
AMR graph: `(f / file-01 :ARG1 (b / brief) :prep-on-behalf-of (g / government))`

Input: According to government sources, the killing happened yesterday  
AMR graph: `(s / say-01 :ARG0 (s2 / source :mod (g / government)) :ARG1 (k / kill-01 :time (y / yesterday)))`

---

## Relative clauses
Input: The boy believes  
AMR graph: `(b / believe-01 :ARG0 (b2 / boy))`

Input: the boy who believes  
AMR graph: `(b / boy :ARG0-of (b2 / believe-01))`

(Negative adjective pre-nominal → use clause)

Input: the black car  
AMR graph: `(c / car :ARG1-of (b / black-04))`

Input: the car that is not black  
AMR graph: `(c / car :ARG1-of (b / black-04 :polarity -))`

---

## Multiple relations with the same name
Input: the Shanghai legal system  
AMR graph: `(s / system :mod (l / law) :mod (c / city :wiki ""Shanghai"" :name (n / name :op1 ""Shanghai"")))`

Input: She arrived earlier today  
AMR graph: `(a / arrive-01 :ARG1 (s / she) :time (t / today) :time (b / before :op1 (n / now)))`

Input: the boy who wants to believe the girl  
AMR graph: `(b / boy :ARG0-of (w / want-01 :ARG1 (b2 / believe-01 :ARG1 (g / girl))) :ARG0-of b2)`

---

## Conjunctions (and/or/contrast/either/neither)
Input: the boy and the girl  
AMR graph: `(a / and :op1 (b / boy) :op2 (g / girl))`

Input: either the boy, the girl, or the dog  
AMR graph: `(a / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))`

Input: There was shouting, and the boy left  
AMR graph: `(a / and :op1 (s / shout-01) :op2 (l / leave-11 :ARG0 (b / boy)))`

Input: There was shouting, but the boy stayed  
AMR graph: `(c / contrast-01 :ARG1 (s / shout-01) :ARG2 (s2 / stay-01 :ARG1 (b / boy)))`

Input: But the boy stayed  
AMR graph: `(c / contrast-01 :ARG2 (s / stay-01 :ARG1 (b / boy)))`

(Shared subject pulled into both conjuncts)

Input: The boy shouted and left  
AMR graph: `(a / and :op1 (s / shout-01 :ARG0 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

Input: The boy arrived and was promptly killed  
AMR graph: `(a / and :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (k / kill-01 :ARG1 b :manner (p / prompt)))`

(Non-core can modify whole coordination)

Input: On Tuesday, the boy arrived and left  
AMR graph: `(a / and :time (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :ARG1 (b / boy)) :op2 (l / leave-11 :ARG0 b))`

---

## Quantifiers and scope (canonical placement; polarity interactions)
Input: The boys all left / All the boys left / Each of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all)))`

Input: No boy left / None of the boys left  
AMR graph: `(b / boy :polarity - :ARG0-of (l / leave-01))`

Input: Not all of the boys left  
AMR graph: `(l / leave-01 :ARG0 (b / boy :mod (a / all :polarity -)))`

Input: Not everyone left  
AMR graph: `(l / leave-01 :ARG0 (p / person :mod (a / all :polarity -)))`

(Negation placement examples)

Input: The girl believes that the boy works hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02)))`

Input: The girl believes the boy doesn’t work hard  
AMR graph: `(b / believe-01 :ARG0 (g / girl) :ARG1 (w / work-01 :ARG0 (b2 / boy) :manner (h / hard-02 :polarity -)))`

(Other placements change meaning; included for contrast in original guide.)

---

## Degree (`:degree`, `have-degree-91`)
Input: You are very beautiful  
AMR graph: `(b / beautiful-02 :ARG1 (y / you) :degree (v / very))`

(Comparatives/superlatives as main focus)

Input: the brighter boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / more)))`

Input: the brightest boy  
AMR graph: `(b / boy :ARG1-of (h / have-degree-91 :ARG2 (b2 / bright-03 :ARG1 b) :ARG3 (m / most)))`

Input: a better plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (g / good-02 :ARG1 p) :ARG3 (m / more)))`

Input: a worse plan  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (b / bad-07 :ARG1 p) :ARG3 (m / more)))`

Input: a plan that is too extreme  
AMR graph: `(p / plan :ARG1-of (h / have-degree-91 :ARG2 (e / extreme) :ARG3 (t / too)))`

Input: the girl is taller than the boy  
AMR graph: `(h / have-degree-91 :ARG1 (g / girl) :ARG2 (t / tall) :ARG3 (m / more) :ARG4 (b / boy))`

Input: she is the tallest girl on the team  
AMR graph: `(h / have-degree-91 :ARG1 (s / she) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (g / girl :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team))))`

(Degree-consequence)

Input: It is too early to reach any conclusion  
AMR graph: `(h / have-degree-91 :ARG2 (e / early) :ARG3 (t / too) :ARG6 (c / conclude-01))`

(Negative explicit)

Input: He is not tall enough to ride the rollercoaster  
AMR graph: `(h / have-degree-91 :polarity - :ARG1 (h2 / he) :ARG2 (t / tall) :ARG3 (e / enough) :ARG6 (r / ride-01 :ARG0 h2 :ARG1 (r2 / rollercoaster)))`

---

## Variables and co-reference
Input: The boy wants to go  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (g / go-02 :ARG0 b))`

Input: The boy wants to believe himself  
AMR graph: `(w / want-01 :ARG0 (b / boy) :ARG1 (b2 / believe-01 :ARG0 b :ARG1 b))`

Input: He saw them  
AMR graph: `(s / see-01 :ARG0 (h / he) :ARG1 (t / they))`

---

## Possession
Input: his car / the car of his  
AMR graph: `(c / car :poss (h / he))`

Input: the nation’s titans  
AMR graph: `(t / titan :poss (n / nation))`

---

## Pertainyms (stem to noun, use `:mod`)
Input: microbial virus / microbe virus  
AMR graph: `(v / virus :mod (m / microbe))`

Input: atomic war  
AMR graph: `(w / war :mod (a / atom))`

Input: Behavioral problems / Problems with behavior / Problems behaving  
AMR graph: `(p / problem :mod (b / behave-01))`

---

## Ordinals
Input: the second planet / planet number 2  
AMR graph: `(p / planet :ord (o / ordinal-entity :value 2))`

Input: our first visit in 10 years  
AMR graph: `(v / visit-01 :ARG0 (w / we) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / year))))`

---

## Subsets
Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :subset-of (s3 / soldier :quant 20)))`

(Equivalent include-91)

Input: Nine of the twenty soldiers died  
AMR graph: `(d / die-01 :ARG1 (s / soldier :quant 9 :ARG1-of (i / include-91 :ARG2 (s3 / soldier :quant 20))))`

Input: Four of the five survivors had the disease, including three who were diagnosed  
AMR graph: `(h / have-03 :ARG0 (p4 / person :quant 4 :subset-of (p2 / person :ARG0-of (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :ARG1-of (d3 / diagnose-01))) :ARG1 (d / disease))`

---

## Named Entities and wikification (selected examples)
Input: Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown""))`

Input: the orc-slaying Mollie Brown  
AMR graph: `(p / person :wiki ""Margaret_Brown"" :name (n / name :op1 ""Mollie"" :op2 ""Brown"") :ARG0-of (s / slay-01 :ARG1 (o / orc)))`

Input: Titanic (ship)  
AMR graph: `(s / ship :wiki ""RMS_Titanic"" :name (n / name :op1 ""Titanic""))`

Input: Marina del Rey (city)  
AMR graph: `(c / city :wiki ""Marina_del_Rey,_California"" :name (n / name :op1 ""Marina"" :op2 ""del"" :op3 ""Rey""))`

(Abbrev & common words)

Input: Calif.  
AMR graph: `(s / state :wiki ""California"" :name (n / name :op1 ""Calif.""))`

Input: ad rates / advertising rates  
AMR graph: `(r / rate :mod (a / advertise-01))`

(Hallucinated types from NE list)

Input: Pascale  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Pascale""))`

Input: the chip maker  
AMR graph: `(c / company :ARG0-of (m / make-01 :ARG1 (c2 / chip)))`

(More specific than base type)

Input: the poet William Shakespeare  
AMR graph: `(p / poet :wiki ""William_Shakespeare"" :name (n / name :op1 ""William"" :op2 ""Shakespeare""))`

Input: the village of Odinaboi  
AMR graph: `(v / village :wiki - :name (n / name :op1 ""Odinaboi""))`

(Honorifics inside names)

Input: Mr. Wu  
AMR graph: `(p / person :wiki - :name (n / name :op1 ""Mr."" :op2 ""Wu""))`

(“Special role” titles via have-org-role-91; see below.)

(Regional/party/spacecraft with more specific types)

Input: Sudan’s Darfur region  
AMR graph: `(c / country-region :wiki ""Darfur"" :name (n / name :op1 ""Darfur"") :location (c2 / country :wiki ""Sudan"" :name (n2 / name :op1 ""Sudan"")))`

Input: Germany’s conservative CDU party  
AMR graph: `(p / political-party :wiki ""Christian_Democratic_Union_of_Germany"" :name (n / name :op1 ""CDU"") :mod (c / conservative) :mod (c2 / country :wiki ""Germany"" :name (n2 / name :op1 ""Germany"")))`

Input: the spaceship Shenzhou / the Shenzhou spacecraft  
AMR graph: `(s / spaceship :wiki ""Shenzhou_(spacecraft)"" :name (n / name :op1 ""Shenzhou""))`

(Appositive)

Input: Elsevier N.V., the Dutch publishing group  
AMR graph: `(g / group :wiki ""Reed_Elsevier#Elsevier_NV"" :name (e / name :op1 ""Elsevier"" :op2 ""N.V."") :mod (c / country :wiki ""Netherlands"" :name (h / name :op1 ""Netherlands"")) :ARG0-of (p2 / publish-01))`

(Multiple instance labels → use `:mod` on instance)

Input: the poet Dr. Seuss  
AMR graph: `(d / doctor :wiki ""Dr._Seuss"" :name (n / name :op1 ""Seuss"") :mod (p / poet))`

---

## Special Frames for Roles

### have-org-role-91 (office holder / org / title)
Input: US President Obama  
AMR graph: `(p / person :wiki ""Barack_Obama"" :name (n / name :op1 ""Obama"") :ARG0-of (h / have-org-role-91 :ARG1 (c / country :wiki ""United_States"" :name (n2 / name :op1 ""US"")) :ARG2 (p2 / president)))`

### have-rel-role-91 (relation between two similar-type entities)
Input: He is my brother-in-law  
AMR graph: `(h / have-rel-role-91 :ARG0 (h2 / he) :ARG1 (i / i) :ARG2 (b / brother-in-law))`

---

## Exact numbers / Approximate numbers
Input: forty thousand boys / 40,000 boys  
AMR graph: `(b / boy :quant 40000)`

Input: one and half billion atoms / 1.5 billion / a billion and half / 1,500,000,000  
AMR graph: `(a / atom :quant 1500000000)`

Input: several hundred boys  
AMR graph: `(b / boy :quant (s / several :op1 100))`

Input: more than 4000 boys  
AMR graph: `(b / boy :quant (m / more-than :op1 4000))`

Input: between 4000 and 5000 boys  
AMR graph: `(b / boy :quant (m / between :op1 4000 :op2 5000))`

---

## Quantities (X-quantity types, relative/absolute time)
Input: ten miles / 10 miles / 10-mile  
AMR graph: `(q / distance-quantity :unit (m / mile) :quant 10)`

Input: about 10 miles  
AMR graph: `(a / about :op1 (q / distance-quantity :unit (m / mile) :quant 10))`

Input: 30 years  
AMR graph: `(t / temporal-quantity :unit (y / year) :quant 30)`

Input: during the past 30 years  
AMR graph: `(b / before :op1 (n / now) :duration (t / temporal-quantity :unit (y / year) :quant 30))`

Input: 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (t / temporal-quantity :unit (y / year) :quant 30))`

Input: more than 30 years ago  
AMR graph: `(b / before :op1 (n / now) :quant (m / more-than :op1 (t / temporal-quantity :unit (y / year) :quant 30)))`

(Disjunction high)

Input: three or four years  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (y / year) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / year) :quant 4))`

Input: six months or a year  
AMR graph: `(o / or :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / year) :quant 1))`

(Relative position with quantity)

Input: The plane crashed 50 miles east of Moscow  
AMR graph: `(c / crash-01 :ARG1 (p / plane) :location (r / relative-position :op1 (g / city :wiki ""Moscow"" :name (n / name :op1 ""Moscow"")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east)))`

(Vague quantity)

Input: A large number of people gathered  
AMR graph: `(g / gather-01 :ARG0 (p / person :quant (n / number :mod (l / large))))`

(Measurement as primary)

Input: The number of people increased  
AMR graph: `(i / increase-01 :ARG1 (n / number :quant-of (p / person)))`

(Monetary)

Input: C$20 / 20 Canadian dollars  
AMR graph: `(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki ""Canada"" :name (n / name :op1 ""Canada""))))`

(Scales)

Input: 7.9 on the Richter scale  
AMR graph: `(q / seismic-quantity :quant 7.9 :scale (r / richter))`

### have-quant-91 (quantitative comparisons)
Input: He sold as many cars as his competitor  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (e2 / equal) :ARG4 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: He sold the most cars of his competitors  
AMR graph: `(s / sell-01 :ARG0 (h / he) :ARG1 (c / car :ARG1-of (h2 / have-quant-91 :ARG3 (m / most) :ARG5 (c3 / car :ARG1-of (s2 / sell-01 :ARG0 (p / person :ARG0-of (c2 / compete-02 :ARG1 h)))))))`

Input: I had scarcely enough drinking water to last a week  
AMR graph: `(h / have-03 :ARG0 (i / i) :ARG1 (w / water :purpose (d2 / drink-01 :ARG0 i) :ARG1-of (h3 / have-quant-91 :ARG3 (e / enough :mod (s / scarce)) :ARG6 (l / last-03 :ARG1 w :ARG2 (t / temporal-quantity :quant 1 :unit (w2 / week)) :ARG3 i))))`

---

## Mathematical operators
Input: The aircraft’s velocity reached three times the speed of sound  
AMR graph: `(r / reach-01 :ARG0 (v / velocity :poss (a / aircraft)) :ARG1 (p / product-of :op1 3 :op2 (s / speed :poss (s2 / sound))))`

Input: Patrick Makau finished the marathon in 2 hours, 3 minutes and 38 seconds  
AMR graph: `(f / finish-01 :ARG0 (p / person :wiki ""Patrick_Makau_Musyoki"" :name (n / name :op1 ""Patrick"" :op2 ""Makau"")) :ARG1 (r / run-02 :ARG0 p :ARG1 (m / marathon) :duration (s2 / sum-of :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))`

---

## Other entities (dates/times/percent/phone/email/url)
Input: February 29, 2012 / 29 February 2012 / 2/29/2012  
AMR graph: `(d / date-entity :year 2012 :month 2 :day 29)`

Input: 2012 / the year 2012  
AMR graph: `(d / date-entity :year 2012)`

Input: April  
AMR graph: `(d / date-entity :month 4)`

Input: Friday  
AMR graph: `(d / date-entity :weekday (f / friday))`

Input: February, 2012  
AMR graph: `(d / date-entity :year 2012 :month 2)`

Input: Wednesday, February 29  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday))`

Input: Wednesday, February 29, 16:30 PST  
AMR graph: `(d / date-entity :month 2 :day 29 :weekday (w / wednesday) :time ""16:30"" :timezone (z / PST))`

Input: 16:30 / 4:30pm / 4:30 in the afternoon / half past four  
AMR graph: `(d / date-entity :time ""16:30"")`

Input: February 29, 24th year of Heisei era (Japan calendar)  
AMR graph: `(d / date-entity :era (h / heisei) :year 24 :month 2 :day 29 :calendar (j / country :wiki ""Japan"" :name (n / name :op1 ""Japan"")))`

Input: 2011Q4  
AMR graph: `(d / date-entity :year 2011 :quarter 4)`

Input: Summer 2011  
AMR graph: `(d / date-entity :year 2011 :season (s / summer))`

Input: Winter 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :season (w / winter))`

Input: academic year 2011-2012  
AMR graph: `(d / date-entity :year 2011 :year2 2012 :calendar (y / year :mod (a / academia)))`

Input: United States government fiscal year 2012  
AMR graph: `(d / date-entity :year 2012 :calendar (y / year :mod (f / finance) :mod (g / government-organization :ARG0-of (g2 / govern-01 :ARG1 (c / country :wiki ""United_States"" :name (n / name :op1 ""United"" :op2 ""States""))))))`

Input: March 8-9, 2012  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 2012 :month 3 :day 8) :op2 (d3 / date-entity :year 2012 :month 3 :day 9))`

Input: Sept. 1, 1939 - May 8, 1945  
AMR graph: `(d / date-interval :op1 (d2 / date-entity :year 1939 :month 9 :day 1) :op2 (d3 / date-entity :year 1945 :month 5 :day 8))`

Input: 25% / twenty-five percent / 25 percent  
AMR graph: `(p / percentage-entity :value 25)`

Input: 1-800-555-1212 / 1 (800) 555-1212  
AMR graph: `(p / phone-number-entity :value ""1-800-555-1212"")`

Input: president@whitehouse.gov  
AMR graph: `(e / email-address-entity :value ""president@whitehouse.gov"")`

Input: www.whitehouse.gov  
AMR graph: `(u / url-entity :value ""www.whitehouse.gov"")`

---

## Reification (turning roles into concepts)
(Example cause)

Input: The girl left because the boy arrived  
AMR graph (shortcut): `(l / leave-11 :ARG0 (g / girl) :cause (a / arrive-01 :ARG0 (b / boy)))`  
AMR graph (reified): `(l / leave-11 :ARG0 (g / girl) :ARG1-of (c / cause-01 :ARG0 (a / arrive-01 :ARG0 (b / boy))))`

(Example location → be-located-at-91; also allows negation/time on the relation—see long guide.)

---

## Freak Show (cycles & non-cycles)
(Non-cycle with inverse)

Input: The woman who lost her scarf  
AMR graph: `(w / woman :ARG0-of (l / lose-02 :ARG1 (s / scarf :poss w)))`

(Legitimate cycle example)

Input: a procedure to ensure quality  
AMR graph: `(p / procedure :purpose (e / ensure-01 :ARG0 p :ARG1 (q / quality)))`

(Reified to break cycle)

Input: a procedure to ensure quality (reified)  
AMR graph: `(p / procedure :ARG1-of (h / have-purpose-91 :ARG2 (e / ensure-01 :ARG0 p :ARG1 (q / quality))))`

(Alternate encodings of same proposition omitted here for brevity; see long guide note on equivalence.)

Important: Concept names must always have variables. Variables are lowercase letters with optional digits, e.g. (c1 / concept ...). Different concepts always get different variables, e.g. (c1 / concept ...) and (c2 / concept), even if the concept name is the same, e.g. (b1 / bag ...) and (b2 / bag). To refer to the before-mentioned concept, you may use just the variable without brackets. Comments are absolutely not allowed. You only generate AMR parses and nothing else.Generate an Abstract Meaning Representation (AMR) graph for the following sentence: Tang stated that the SCO will pass a temporary pact on SCO's foreign policies at the meeting on 23 November 2002.
AMR graph:"	"(s / state-01
      :ARG0 (p / person :wiki ""Tang_Jiaxuan"" :name (n / name :op1 ""Tang""))
      :ARG1 (p2 / pass-01
            :ARG0 (o2 / organization :wiki ""Shanghai_Cooperation_Organisation"" :name (n3 / name :op1 ""SCO""))
            :ARG1 (p3 / pact
                  :mod (t / temporary)
                  :topic (p4 / policy-01
                        :ARG0 o2
                        :ARG2 (f / foreign)))
            :time (m / meet-03
                  :time (d / date-entity :day 23 :month 11 :year 2002))))"	"
(s / state-01
    :ARG0 (p / person :wiki ""Tang_Jiaxuan"" :name (n / name :op1 ""Tang""))
    :ARG1 (p2 / pass-11
        :ARG0 (o / organization :wiki ""Shanghai_Cooperation_Organisation"" :name (n2 / name :op1 ""SCO""))
        :ARG1 (p3 / pact :mod (t / temporary))
        :purpose (p4 / policy
            :mod (f / foreign)))
    :location (m / meet-03
        :ARG1 o
        :time (d / date-entity :year 2002 :month 11 :day 23)))
"
